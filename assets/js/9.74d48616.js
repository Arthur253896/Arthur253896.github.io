(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{281:function(t,s,a){t.exports=a.p+"assets/img/cyclein.a68f497e.png"},312:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"环形链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#环形链表"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("环形链表"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("img",{attrs:{src:"cycleLinklist.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"_1、快慢指针法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、快慢指针法"}},[t._v("#")]),t._v(" 1、快慢指针法：")]),t._v(" "),s("p",[t._v("如果用两个循环一个先走然后一个记录当前位置，那么时间复杂度为n*n，超出时间限制")]),t._v(" "),s("h2",{attrs:{id:"_2、两阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、两阶段"}},[t._v("#")]),t._v(" 2、两阶段")]),t._v(" "),s("p",[t._v("依旧是快慢指针，但改变一下策略：")]),t._v(" "),s("p",[t._v("1、定义两个指针slow和fast，slow每次走一格，fast每次走两格，如果两个相遇了则说明一定有环；")]),t._v(" "),s("p",[t._v("2、找到这个环的入口")]),t._v(" "),s("p",[s("img",{attrs:{src:a(281),alt:""}}),t._v("\n再定义两个指针一个指向头节点index1，一个指向相遇的节点index2，入口节点就是求x；")]),t._v(" "),s("p",[t._v("slow走过一共x+y路程，fast走过x+n（y+z）+y，fast一次走两个，则相遇时有：2*(x+y)=x+y+n(y+z)；两边简化：")]),t._v(" "),s("p",[t._v("x=（n-1）*（y+z）+z;")]),t._v(" "),s("p",[t._v("如果n=1，则x=z说明，慢指针的路程恰好等于从相遇点到入口的距离；")]),t._v(" "),s("p",[t._v("如果n>1，则说明，慢指针的路程等于从相遇点到入口的距离再加n圈，")]),t._v(" "),s("p",[t._v("无论如何最后index1和index2相遇的位置就一定是环的入口；")]),t._v(" "),s("p",[t._v("当然如果fast slow没相遇则不存在环；代码如下：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("    ListNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("detectCycle")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ListNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        ListNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        ListNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("post"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("post"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" post"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//要注意边界问题，因为post一次移动两个节点，所以要要求next不为空")]),t._v("\n            pre"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            post"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("post"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pre"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("post"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                ListNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("index1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                ListNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("index2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("post"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//指向相遇点")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("index2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    index1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("index1"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    index2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("index2"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" index1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);